#K8S搭建文档
# 1.使用kubeadmin安装
## 基础环境配置
	1. 修改IP地址为静态ip地址
		1. vi /etc/sysconfig/network-scripts/ifcfg-ens33
			BOOTPROTO=static #dhcp改为static（修改）
			ONBOOT=yes #开机启用本配置，一般在最后一行（修改）
			 
			IPADDR=192.168.179.111 #静态IP（增加）
			GATEWAY=192.168.179.2 #默认网关，虚拟机安装的话，通常是2，也就是VMnet8的网关设置（增加）
			NETMASK=255.255.255.0 #子网掩码（增加）
			DNS1=192.168.179.2 #DNS 配置，虚拟机安装的话，DNS就网关就行，多个DNS网址的话再增加（增加）
		2.systemctl restart network
		3.ping www.baidu.com 相互 ping对方ip地址
	2.配置节点间无密钥通信
		1.三个节点分别执行：
			ssh-keygen
		2.三个节点分别执行：
			ssh-copy-id -i ~/.ssh/id_rsa.pub root@192.168.79.132
		3.测试：
			ssh root@192.168.79.132
	3.配置hostname：
		CentOS7永久修改：
			hostnamectl set-hostname master
	4.配置本地DNS解析：
		1.编辑：/etc/hosts
		192.168.79.130 master
		192.168.79.131 node1
		192.168.79.132 node2
		2.复制到各个节点：
		scp /etc/hosts root@192.168.79.132:/etc/	
	5.关闭selinux和firewalld
		1. systemctl stop firewalld && systemctl disable firewalld
		2. sed -i 's/^SELINUX=enforcing$/SELINUX=disabled/' /etc/selinux/config && setenforce 0
	6.关闭swap内存交换空间
		1.swapoff -a
		2.yes | cp /etc/fstab /etc/fstab_bak
		3.cat /etc/fstab_bak |grep -v swap > /etc/fstab
	7.设置时间同步
		设置时区：timedatectl set-timezone Asia/Shanghai
		1.yum install -y chrony
		2.sed -i 's/^server/#&/' /etc/chrony.conf
		3.设置上游ntp服务器
		cat >> /etc/chrony.conf << EOF
		server 0.asia.pool.ntp.org iburst
		server 1.asia.pool.ntp.org iburst
		server 2.asia.pool.ntp.org iburst
		server 3.asia.pool.ntp.org iburst
		allow all
		EOF
		4.设置为开机自启动
		systemctl enable chronyd && systemctl restart chronyd
		5.开启网络时间同步
		timedatectl set-ntp true
		6.开始同步时间
		chronyc sources
	8.修改iptables参数
		1.纠正iptables被绕过导致流量路由不正确
		cat <<EOF >  /etc/sysctl.d/k8s.conf
		vm.swappiness = 0
		net.bridge.bridge-nf-call-ip6tables = 1
		net.bridge.bridge-nf-call-iptables = 1
		net.ipv4.ip_forward = 1
		EOF
		2.配置生效
		modprobe br_netfilter
		sysctl -p /etc/sysctl.d/k8s.conf
		3.加载ipvs相关模块
		1.配置
		cat <<EOF > /etc/sysconfig/modules/ipvs.modules 
		#!/bin/bash
		modprobe -- ip_vs
		modprobe -- ip_vs_rr
		modprobe -- ip_vs_wrr
		modprobe -- ip_vs_sh
		modprobe -- nf_conntrack_ipv4
		EOF	
		2.执行脚本开机生效
		chmod 755 /etc/sysconfig/modules/ipvs.modules && bash /etc/sysconfig/modules/ipvs.modules && lsmod | grep -e ip_vs -e nf_conntrack_ipv4
		3.安装工具查看ipvs的代理规则
		yum install ipset ipvsadm -y
	9.配置阿里云docker源
		1.安装yum-config-manager工具
		yum -y install yum-utils 
		2.配置源
		yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo
		3.安装最新版dockers-ce
		yum install -y docker-ce
		4.设置开机自启动
		systemctl start docker && systemctl enable docker
		5.可设置daocloud镜像加速或者阿里云镜像加速，（不操作节约时间）
	10.修改docker默认配置
		1.vi /usr/lib/systemd/system/docker.service
			
		增加配置项：配置docker科学上网代理
		+ Environment="HTTPS_PROXY=http://192.168.43.162:1080"
		+ Environment="NO_PROXY=127.0.0.1/8,192.168.0.0/16"
		ExecStart=/usr/bin/dockerd -H fd:// --containerd=/run/containerd/containerd.sock
		+ ExecStartPost=/usr/sbin/iptables -P FORWARD ACCEPT
		ExecReload=/bin/kill -s HUP $MAINPID
		2.使dockers配置生效
		systemctl daemon-reload
		systemctl restart docker
		docker info  查看配置是否生效
		HTTPS Proxy: http://192.168.43.162:1080
		No Proxy: 127.0.0.1/8,192.168.0.0/16
		3.查看forwod chain是否是accept
		iptables -vnL
		4.sysctl -a | grep bridge
		查看：
		net.bridge.bridge-nf-call-ip6tables = 1
		net.bridge.bridge-nf-call-iptables = 1
	11.配置阿里云的k8s源：
		cd /etc/yum.repo.d/
		vi kubernetes.repo
		
		[kubernetes]
		name=Kubernetes Repository
		baseurl=https://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64/
		gpgcheck=1
		gpgkey=https://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg https://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg
		2.验证是否配置成功
		yum repolist 
		3.查看kubernetes软件包：
		yum list all | grep "^kube"
	12.安装kubernetes软件包 (以上步骤三个节点均需执行）
		1.yum install kubeadm kubelet kubectl -y 
		2.查看安装位置
			rpm -ql kubelet
			rpm -ql kubeadm
		3.初始化之前的配置，设置忽略swap报错
			vi /etc/sysconfig/kubelet
			KUBELET_EXTRA_ARGS="--fail-swap-on=false"
		4.查看初始化配置选项：
			kubeadm config print init-defaults
		
		flannel：默认网络 10.244.0.0/16
		calico: 默认网络  192.168.0.0/16
		
		修改默认配置两种方法：
		1. 使用传递选项 命令行
		2. 使用配置文件
		3. kubeadm init --kubernetes-version=v1.14.1 
			1. 查看包版本：rpm -q kubeadm
		4. 指定pod网络 使用flannel
			kubeadm init --kubernetes-version="v1.14.1" --pod-network-cidr="10.244.0.0/16" --dry-run
		5. 查看需要的包
			1. kubeadm config images list
			2. 首先pull下来： kubeadm config images pull

		6. 执行初始化
			our Kubernetes master has initialized successfully!

			To start using your cluster, you need to run the following as a regular user:
			
			  mkdir -p $HOME/.kube
			  sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
			  sudo chown $(id -u):$(id -g) $HOME/.kube/config
			
			You should now deploy a pod network to the cluster.
			Run "kubectl apply -f [podnetwork].yaml" with one of the options listed at:
			  https://kubernetes.io/docs/concepts/cluster-administration/addons/
			
			You can now join any number of machines by running the following on each node
			as root:
			
			  kubeadm join 192.168.79.130:6443 --token 1iq1mk.l366bc3w6nbv1vvd --discovery-token-ca-cert-hash sha256:c2c1d8ffb84733edd7991735ba9a20c4326adb146c58acd01287f8661a0d0bfb
		如果遗忘：
			kubeadm token create --print-join-command
		6. 继续
			1. mkdir .kube 家目录下执行
			2. cp /etc/kubernetes/admin.conf .kube/config
			3. 部署flannel网络插件： 去github寻找coreos--》flannel
			4. docker pull quay.io/coreos/flannel:v0.11.0-amd64
			kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml
			4. kubectl get pods -n kube-system 查看运行中pods
				[root@master ~]# kubectl get pods -n kube-system
				NAME                             READY   STATUS    RESTARTS   AGE
				coredns-86c58d9df4-k5xxp         1/1     Running   0          6m12s
				coredns-86c58d9df4-k649n         1/1     Running   0          6m12s
				etcd-master                      1/1     Running   0          5m29s
				kube-apiserver-master            1/1     Running   0          5m29s
				kube-controller-manager-master   1/1     Running   0          5m9s
				kube-flannel-ds-amd64-jnk55      1/1     Running   0          47s
				kube-proxy-xmdz5                 1/1     Running   0          6m12s
				kube-scheduler-master            1/1     Running   0          5m26s
			5. kubectl get nodes
	
		13. node节点执行命令安装k8s:
			1. yum install kubeadm kubelet -y
			2. 修改/etc/sysconfig/kubelet
				1. KUBELET_EXTRA_ARGS="--fail-swap-on=false"
			3. 不用启动kubelet  直接加入集群
			4.  kubeadm join 192.168.79.130:6443 --token 1iq1mk.l366bc3w6nbv1vvd --discovery-token-ca-cert-hash sha256:c2c1d8ffb84733edd7991735ba9a20c4326adb146c58acd01287f8661a0d0bfb

			5. 这个过程同样会托镜像
				1. docker image list 查看
					1. [root@node1 yum.repos.d]# docker image list
						REPOSITORY               TAG                 IMAGE ID            CREATED             SIZE
						k8s.gcr.io/kube-proxy    v1.13.4             fadcc5d2b066        6 days ago          80.3MB
						quay.io/coreos/flannel   v0.11.0-amd64       ff281650a721        5 weeks ago         52.6MB
						k8s.gcr.io/pause         3.1                 da86e6ba6ca1        14 months ago       742kB
				2. 回到主节点  kubectl get nodes   过程中没有启动过kubelet
				3. kubectl config view
				4. 配置从节点使用kubectl 查看节点信息
					1. 家目录下：mkdir .kube
					2. 复制主节点下，scp /etc/kubernetes/admin.conf node1:/root/.kube/config
		14. 测试部署
			1. kubectl run nginx --image=nginx --replicas=3
			2. kubectl get pod
			3. kubectl get pod -o wide
			4. kubectl expose deployment nginx --port=88 --target-port=80 --type=NodePort
			5. kubectl get svc
			6. 88:34710/TCP也指定了一个34710端口，它表示可以通过node节点ip的这个端口访问服务。
			7. 这里有三个pod，请求不一定分配到哪一个pod上去了:kubectl logs nginx-8586cf59-bzmll
